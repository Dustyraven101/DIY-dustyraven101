Pause menu setup

<!DOCTYPE html>
<html>
<head>
  <title>Snake Game</title>
  <style>
    /* CSS styles */

    #game-board {
      border: 1px solid black;
      width: 320px;
      height: 320px;
      position: relative;
    }
    .snake {
      position: absolute;
      width: 20px;
      height: 20px;
    }
    #food {
      position: absolute;
      width: 20px;
      height: 20px;
      background-color: red;
    }
    .cross-pad {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 10px;
    }
    .cross-pad button {
      width: 60px;
      height: 60px;
      margin: 5px;
      font-size: 20px;
    }
    #score {
      font-size: 20px;
      margin-top: 10px;
    }
    #pause-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }
    #pause-window {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      width: 200px;
      height: 150px;
      background-color: white;
      border: 1px solid black;
      border-radius: 5px;
      padding: 20px;
    }
    #pause-window h2 {
      margin-top: 0;
    }
    #pause-window button {
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <!-- HTML elements -->
  <div id="score">Score: 0</div>
  <div>
    <label for="color-select">Select Snake Color:</label>
    <select id="color-select">
      <option value="green">Green</option>
      <option value="blue">Blue</option>
      <option value="red">Red</option>
      <option value="yellow">Yellow</option>
    </select>
  </div>
  <div id="game-board"></div>
  <div class="cross-pad">
    <button id="up-button">↑</button>
  </div>
  <div class="cross-pad">
    <button id="left-button">←</button>
    <button id="down-button">↓</button>
    <button id="right-button">→</button>
  </div>
  <button id="pause-button">Pause</button>
  <button id="reset-button">Reset</button>

  <!-- Pause overlay -->
  <div id="pause-overlay">
    <div id="pause-window">
      <h2>Game Paused</h2>
      <button id="resume-button">Resume</button>
      <button id="quit-button">Quit</button>
    </div>
  </div>

  <!-- JavaScript code -->
  <script>
    // JavaScript code to control the game logic

    // Constants for game dimensions
    const BOARD_SIZE = 320;
    const SEGMENT_SIZE = 20;
    const NUM_SEGMENTS = BOARD_SIZE / SEGMENT_SIZE;
    const INITIAL_SPEED = 200; // Initial snake movement speed in milliseconds

    // Game elements
    const gameBoard = document.getElementById("game-board");
    const upButton = document.getElementById("up-button");
    const downButton = document.getElementById("down-button");
    const leftButton = document.getElementById("left-button");
    const rightButton = document.getElementById("right-button");
    const resetButton = document.getElementById("reset-button");
    const pauseButton = document.getElementById("pause-button");
    const resumeButton = document.getElementById("resume-button");
    const quitButton = document.getElementById("quit-button");
    const colorSelect = document.getElementById("color-select");
    const scoreElement = document.getElementById("score");
    const pauseOverlay = document.getElementById("pause-overlay");
    const pauseWindow = document.getElementById("pause-window");

    // Create the initial snake and food positions
    let snake = [{ x: 160, y: 160 }];
    let food = { x: 0, y: 0 };

    // Set the initial movement direction
    let direction = "right";

    // Variable to store the game loop interval
    let gameLoopInterval;

    // Score variable
    let score = 0;

    // Function to generate a random position for the food
    function generateFood() {
      food.x = Math.floor(Math.random() * NUM_SEGMENTS) * SEGMENT_SIZE;
      food.y = Math.floor(Math.random() * NUM_SEGMENTS) * SEGMENT_SIZE;
    }

    // Function to handle button clicks
    function handleButtonClick(event) {
      const buttonId = event.target.id;

      switch (buttonId) {
        case "up-button":
          if (direction !== "down") {
            direction = "up";
          }
          break;
        case "down-button":
          if (direction !== "up") {
            direction = "down";
          }
          break;
        case "left-button":
          if (direction !== "right") {
            direction = "left";
          }
          break;
        case "right-button":
          if (direction !== "left") {
            direction = "right";
          }
          break;
        case "reset-button":
          resetGame();
          break;
        case "pause-button":
          pauseGame();
          break;
        case "resume-button":
          resumeGame();
          break;
        case "quit-button":
          quitGame();
          break;
      }
    }

    // Function to handle color selection change
    function handleColorChange() {
      const selectedColor = colorSelect.value;
      const snakeElements = document.getElementsByClassName("snake");

      // Apply the selected color to all snake segments
      Array.from(snakeElements).forEach(segment => {
        segment.style.backgroundColor = selectedColor;
      });
    }

    // Function to draw the snake and food on the game board
    function draw() {
      // Clear the previous frame
      gameBoard.innerHTML = "";

      // Draw the snake
      snake.forEach(function (segment) {
        const snakeElement = document.createElement("div");
        snakeElement.className = "snake";
        snakeElement.style.left = segment.x + "px";
        snakeElement.style.top = segment.y + "px";
        snakeElement.style.backgroundColor = colorSelect.value; // Apply snake color
        gameBoard.appendChild(snakeElement);
      });

      // Draw the food
      const foodElement = document.createElement("div");
      foodElement.id = "food";
      foodElement.style.left = food.x + "px";
      foodElement.style.top = food.y + "px";
      gameBoard.appendChild(foodElement);
    }

    // Function to update the game state
    function update() {
      // Determine the new head position based on the current direction
      const head = { x: snake[0].x, y: snake[0].y };

      switch (direction) {
        case "up":
          head.y -= SEGMENT_SIZE;
          if (head.y < 0) {
            head.y = BOARD_SIZE - SEGMENT_SIZE;
          }
          break;
        case "down":
          head.y += SEGMENT_SIZE;
          if (head.y >= BOARD_SIZE) {
            head.y = 0;
          }
          break;
        case "left":
          head.x -= SEGMENT_SIZE;
          if (head.x < 0) {
            head.x = BOARD_SIZE - SEGMENT_SIZE;
          }
          break;
        case "right":
          head.x += SEGMENT_SIZE;
          if (head.x >= BOARD_SIZE) {
            head.x = 0;
          }
          break;
      }

      // Check for collision with food
      if (head.x === food.x && head.y === food.y) {
        // Add a new segment to the snake
        snake.push({ ...snake[snake.length - 1] });

        // Generate new food position
        generateFood();

        // Increase the score
        score++;
        scoreElement.textContent = "Score: " + score;
      } else {
        // Remove the last segment of the snake
        snake.pop();
      }

      // Add the new head to the snake
      snake.unshift(head);

      // Draw the updated game state
      draw();
    }

    // Function to reset the game
    function resetGame() {
      // Clear the game loop interval
      clearInterval(gameLoopInterval);

      // Reset the snake and food positions
      snake = [{ x: 160, y: 160 }];
      generateFood();

      // Reset the score
      score = 0;
      scoreElement.textContent = "Score: " + score;

      // Start the game loop
      gameLoopInterval = setInterval(update, INITIAL_SPEED);
    }

    // Function to pause the game
    function pauseGame() {
      clearInterval(gameLoopInterval); // Pause the game loop
      pauseOverlay.style.display = "block"; // Show the pause overlay
    }

    // Function to resume the game
    function resumeGame() {
      gameLoopInterval = setInterval(update, INITIAL_SPEED); // Resume the game loop
      pauseOverlay.style.display = "none"; // Hide the pause overlay
    }

    // Function to quit the game
    function quitGame() {
      clearInterval(gameLoopInterval); // Clear the game loop interval
      pauseOverlay.style.display = "none"; // Hide the pause overlay
      resetGame(); // Reset the game state
    }

    // Add event listeners to the buttons
    upButton.addEventListener("click", handleButtonClick);
    downButton.addEventListener("click", handleButtonClick);
    leftButton.addEventListener("click", handleButtonClick);
    rightButton.addEventListener("click", handleButtonClick);
    resetButton.addEventListener("click", handleButtonClick);
    pauseButton.addEventListener("click", handleButtonClick);
    resumeButton.addEventListener("click", handleButtonClick);
    quitButton.addEventListener("click", handleButtonClick);
    colorSelect.addEventListener("change", handleColorChange);

    // Function to start the game
    function startGame() {
      // Reset the snake and food positions
      snake = [{ x: 160, y: 160 }];
      generateFood();

      // Reset the score
      score = 0;
      scoreElement.textContent = "Score: " + score;

      // Start the game loop
      gameLoopInterval = setInterval(update, INITIAL_SPEED);
    }

    // Start the game
    startGame();
  </script>
</body>
</html>
